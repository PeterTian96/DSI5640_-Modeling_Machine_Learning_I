## set k from 1 to 100
k-seq=seq(0, 10, by = 1)
## set k from 1 to 100
k_seq=seq(0, 10, by = 1)
## make predictions using NW method at training inputs
y_hat_plot <- nadaraya_watson(y, x, x_plot,
kernel_k_nearest_neighbors(k=k_seq))
## set k from 1 to 100
k_seq=seq(0, 10, by = 1)
## make predictions using NW method at training inputs
for k in length(k):
## set k from 1 to 100
k_seq=seq(0, 10, by = 1)
## make predictions using NW method at training inputs
for k_seq in length(k_seq):
## set k from 1 to 100
k_seq=seq(0, 10, by = 1)
## make predictions using NW method at training inputs
for (n in k_seq){
y_hat_plot <- nadaraya_watson(y, x, x_plot,
kernel_k_nearest_neighbors(k=k_seq))
## plot predictions
plot(x, y, xlab="Time (ms)", ylab="Acceleration (g)")
lines(x_plot, y_hat_plot, col="#882255", lwd=2)
}
## set k from 1 to 100
k_seq=seq(0, 10, by = 1)
## make predictions using NW method at training inputs
for (n in k_seq){
y_hat_plot <- nadaraya_watson(y, x, x_plot,
kernel_k_nearest_neighbors(k=n))
## plot predictions
plot(x, y, xlab="Time (ms)", ylab="Acceleration (g)")
lines(x_plot, y_hat_plot, col="#882255", lwd=2)
}
library('MASS') ## for 'mcycle'
library('manipulate') ## for 'manipulate'
library(tidyverse)
library(caret)
#load data
mcycle <- mcycle
#split the mcycle data into training (75%) subsets
train<-sample_frac(mcycle, 0.75)
sid<-as.numeric(rownames(train))
# split the mcycle data into validation (25%) subsets
test<-mcycle[-sid,]
# predicting the mean acceleration
y <- train$accel
x <- matrix(train$times, length(train$times), 1)
## x  - n x p matrix of training inputs
## x0 - 1 x p input where to make prediction
## k  - number of nearest neighbors
kernel_k_nearest_neighbors <- function(x, x0, k=1) {
## compute distance betwen each x and x0
z <- t(t(x) - x0)
d <- sqrt(rowSums(z*z))
## initialize kernel weights to zero
w <- rep(0, length(d))
## set weight to 1 for k nearest neighbors
w[order(d)[1:k]] <- 1
return(w)
}
## y  - n x 1 vector of training outputs
## x  - n x p matrix of training inputs
## x0 - m x p matrix where to make predictions
## kern  - kernel function to use
## ... - arguments to pass to kernel function
nadaraya_watson <- function(y, x, x0, kern, ...) {
k <- t(apply(x0, 1, function(x0_) {
k_ <- kern(x, x0_, ...)
k_/sum(k_)
}))
yhat <- drop(k %*% y)
attr(yhat, 'k') <- k
return(yhat)
}
## create a grid of inputs
x_plot <- matrix(seq(min(x),max(x),length.out=100),100,1)
## make predictions using NW method at training inputs
y_hat_plot <- nadaraya_watson(y, x, x_plot,
kernel_k_nearest_neighbors)
## plot predictions
plot(x, y, xlab="Time (ms)", ylab="Acceleration (g)")
lines(x_plot, y_hat_plot, col="#882255", lwd=2)
## set k from 1 to 100
k_seq=seq(0, 10, by = 1)
## make predictions using NW method at training inputs
for (n in k_seq){
y_hat_plot <- nadaraya_watson(y, x, x_plot,
kernel_k_nearest_neighbors(k=n))
## plot predictions
plot(x, y, xlab="Time (ms)", ylab="Acceleration (g)")
lines(x_plot, y_hat_plot, col="#882255", lwd=2)
}
## set k from 1 to 100
k_seq=seq(0, 10, by = 1)
## make predictions using NW method at training inputs
for (n in k_seq){
x_plot <- matrix(seq(min(x),max(x),length.out=100),100,1)
y_hat_plot <- nadaraya_watson(y, x, x_plot,
kernel_k_nearest_neighbors(k=n))
## plot predictions
plot(x, y, xlab="Time (ms)", ylab="Acceleration (g)")
lines(x_plot, y_hat_plot, col="#882255", lwd=2)
}
## set k from 1 to 100
k_seq=seq(0, 10, by = 1)
## make predictions using NW method at training inputs
for (n in k_seq){
y_hat_plot <- nadaraya_watson(y, x, x_plot, kern = kernel_k_nearest_neighbors, t = i))
## set k from 1 to 100
k_seq=seq(0, 10, by = 1)
## make predictions using NW method at training inputs
for (n in k_seq){
y_hat_plot <- nadaraya_watson(y, x, x_plot, kern = kernel_k_nearest_neighbors, t = i)
}
## set k from 1 to 100
k_seq=seq(0, 10, by = 1)
## make predictions using NW method at training inputs
for (n in k_seq){
y_hat_plot <- nadaraya_watson(y, x, x_plot, kern = kernel_k_nearest_neighbors, t = n)
}
## set k from 1 to 100
k_seq=seq(1, 10, by = 1)
## make predictions using NW method at training inputs
for (n in k_seq){
y_hat_plot <- nadaraya_watson(y, x, x_plot, kern = kernel_k_nearest_neighbors, t = n)
}
## set k from 1 to 100
k_seq=seq(1, 10, by = 1)
## make predictions using NW method at training inputs
for (n in k_seq){
y_hat_plot <- nadaraya_watson(y, x, x_plot, kernel_k_nearest_neighbors, n)
}
## set k from 1 to 100
k_seq=seq(1, 10, by = 1)
## make predictions using NW method at training inputs
for (n in k_seq){
y_hat_plot <- nadaraya_watson(y, x, x_plot, kernel_k_nearest_neighbors, n)
y_hat_plot
}
y_hat_plot
k1 <- seq(1,20,1)
for (i in k1){
y_hat <- Nadaraya_Watson(y = train_y,x = train_x,x0 = test_x, kern = kernel_k_nearest_neighbors, t = i)
}
k1 <- seq(1,20,1)
for (i in k1){
y_hat <- nadaraya_watson(y = train_y,x = train_x,x0 = test_x, kern = kernel_k_nearest_neighbors, t = i)
}
## set k from 1 to 10
k_seq=seq(1, 10, by = 1)
## make predictions using NW method at training inputs
for (n in k_seq){
y_hat_plot <- nadaraya_watson(y, x, x_plot, kernel_k_nearest_neighbors, n)
}
## set k from 1 to 10
k_seq=seq(1, 10, by = 1)
## make predictions using NW method at training inputs
for (n in k_seq){
y_hat_plot <- nadaraya_watson(y, x, x_plot, kernel_k_nearest_neighbors, n)
print(y_hat_plot)
}
## set k from 1 to 10
k_seq=seq(1, 10, by = 1)
## make predictions using NW method at training inputs
for (n in k_seq){
y_hat_plot <- nadaraya_watson(y, x, x_plot, kernel_k_nearest_neighbors, n)
}
library('MASS') ## for 'mcycle'
library('manipulate') ## for 'manipulate'
library(tidyverse)
library(caret)
#load data
mcycle <- mcycle
#split the mcycle data into training (75%) subsets
train<-sample_frac(mcycle, 0.75)
sid<-as.numeric(rownames(train))
# split the mcycle data into validation (25%) subsets
test<-mcycle[-sid,]
# predicting the mean acceleration
y <- train$accel
x <- matrix(train$times, length(train$times), 1)
## x  - n x p matrix of training inputs
## x0 - 1 x p input where to make prediction
## k  - number of nearest neighbors
kernel_k_nearest_neighbors <- function(x, x0, k=1) {
## compute distance betwen each x and x0
z <- t(t(x) - x0)
d <- sqrt(rowSums(z*z))
## initialize kernel weights to zero
w <- rep(0, length(d))
## set weight to 1 for k nearest neighbors
w[order(d)[1:k]] <- 1
return(w)
}
## y  - n x 1 vector of training outputs
## x  - n x p matrix of training inputs
## x0 - m x p matrix where to make predictions
## kern  - kernel function to use
## ... - arguments to pass to kernel function
nadaraya_watson <- function(y, x, x0, kern, ...) {
k <- t(apply(x0, 1, function(x0_) {
k_ <- kern(x, x0_, ...)
k_/sum(k_)
}))
yhat <- drop(k %*% y)
attr(yhat, 'k') <- k
return(yhat)
}
## create a grid of inputs
x_plot <- matrix(seq(min(x),max(x),length.out=100),100,1)
## make predictions using NW method at training inputs
y_hat_plot <- nadaraya_watson(y, x, x_plot,
kernel_k_nearest_neighbors)
## plot predictions
plot(x, y, xlab="Time (ms)", ylab="Acceleration (g)")
lines(x_plot, y_hat_plot, col="#882255", lwd=2)
## set k from 1 to 10
k_seq=seq(1, 10, by = 1)
## make predictions using NW method at training inputs
for (n in k_seq){
y_hat_plot <- nadaraya_watson(y, x, x_plot, kernel_k_nearest_neighbors, n)
}
#Use validation data
y <- test$accel
x <- matrix(test$times, length(test$times), 1)
## loss function
## y    - train/test y
## yhat - predictions at train/test x
loss_squared_error <- function(y, yhat)
(y - yhat)^2
## y    - train/test y
## yhat - predictions at train/test x
## loss - loss function
error <- function(y, yhat, loss=loss_squared_error)
mean(loss(y, yhat))
## y    - training y
## yhat - predictions at training x
## d    - effective degrees of freedom
aic <- function(y, yhat, d)
error(y, yhat) + 2/length(y)*d
## y    - training y
## yhat - predictions at training x
## d    - effective degrees of freedom
bic <- function(y, yhat, d)
error(y, yhat) + log(length(y))/length(y)*d
## Compute effective df using NW method
## y  - n x 1 vector of training outputs
## x  - n x p matrix of training inputs
## kern  - kernel function to use
## ... - arguments to pass to kernel function
effective_df <- function(y, x, kern, ...) {
y_hat <- nadaraya_watson(y, x, x,
kern=kern, ...)
sum(diag(attr(y_hat, 'k')))
}
## how does k affect shape of predictor and eff. df using k-nn kernel ?
## make predictions using NW method at training inputs
y_hat <- nadaraya_watson(y, x, x,
kern=kernel_k_nearest_neighbors, k=1)
edf <- effective_df(y, x,
kern=kernel_k_nearest_neighbors, k=1)
aic_ <- aic(y, y_hat, edf)
bic_ <- bic(y, y_hat, edf)
y_hat_plot <- nadaraya_watson(y, x, x_plot,
kern=kernel_k_nearest_neighbors, k=1)
plot(x, y, xlab="Time (ms)", ylab="Acceleration (g)")
legend('topright', legend = c(
paste0('eff. df = ', round(edf,1)),
paste0('aic = ', round(aic_, 1)),
paste0('bic = ', round(bic_, 1))),
bty='n')
lines(x_plot, y_hat_plot, col="#882255", lwd=2)
## create five folds
set.seed(10)
mcycle_flds  <- createFolds(mcycle$accel, k=5)
print(mcycle_flds)
sapply(mcycle_flds, length)
cvknnreg <- function(kNN = 10, flds=mcycle_flds) {
cverr <- rep(NA, length(flds))
for(tst_idx in 1:length(flds)) { ## for each fold
## get training and testing data
mcycle_trn <- mcycle[-flds[[tst_idx]],]
mcycle_tst <- mcycle[ flds[[tst_idx]],]
## fit kNN model to training data
knn_fit <- knnreg(accel ~ times,
k=kNN, data=mcycle_trn)
## compute test error on testing data
pre_tst <- predict(knn_fit, mcycle_tst)
cverr[tst_idx] <- mean((mcycle_tst$accel - pre_tst)^2)
}
return(cverr)
}
## Compute 5-fold CV for kNN = 1:20
cverrs <- sapply(1:20, cvknnreg)
print(cverrs) ## rows are k-folds (1:5), cols are kNN (1:20)
cverrs_mean <- apply(cverrs, 2, mean)
cverrs_sd   <- apply(cverrs, 2, sd)
## Plot the results of 5-fold CV for kNN = 1:20
plot(x=1:20, y=cverrs_mean,
ylim=range(cverrs),
xlab="'k' in kNN", ylab="CV Estimate of Test Error")
segments(x0=1:20, x1=1:20,
y0=cverrs_mean-cverrs_sd,
y1=cverrs_mean+cverrs_sd)
best_idx <- which.min(cverrs_mean)
points(x=best_idx, y=cverrs_mean[best_idx], pch=20)
abline(h=cverrs_mean[best_idx] + cverrs_sd[best_idx], lty=3)
